# PIPELINE DEFINITION
# Name: fraud-detection-pipeline
components:
  comp-deploy-model-kserve:
    executorLabel: exec-deploy-model-kserve
    inputDefinitions:
      parameters:
        aws_access_key_id:
          parameterType: STRING
        aws_secret_access_key:
          parameterType: STRING
        minio_endpoint:
          parameterType: STRING
        mlflow_tracking_uri:
          parameterType: STRING
        namespace:
          defaultValue: admin
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-download-and-split-data:
    executorLabel: exec-download-and-split-data
    outputDefinitions:
      artifacts:
        output_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        output_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        output_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        train_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        val_data:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        aws_access_key_id:
          parameterType: STRING
        aws_secret_access_key:
          parameterType: STRING
        minio_endpoint:
          parameterType: STRING
        mlflow_tracking_uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-deploy-model-kserve:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - deploy_model_kserve
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'mlflow==2.3.1'\
          \ 'kserve==0.14.0' 'kubernetes==25.3.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef deploy_model_kserve(\n    mlflow_tracking_uri: str,\n    minio_endpoint:\
          \ str,\n    aws_access_key_id: str,\n    aws_secret_access_key: str,\n \
          \   namespace: str = \"admin\"\n) -> str:\n    import mlflow\n    from kubernetes.client\
          \ import V1ObjectMeta\n    from kubernetes import client as k8s_client,\
          \ config as k8s_config\n    from kserve import (\n        constants,\n \
          \       KServeClient,\n        V1beta1InferenceService,\n        V1beta1InferenceServiceSpec,\n\
          \        V1beta1PredictorSpec,\n        V1beta1ModelSpec,\n        V1beta1ModelFormat,\n\
          \    )\n    import time\n\n    # Initialize KServe client\n    #config.load_incluster_config()\n\
          \    kserve_client = KServeClient()\n\n    # Get latest model version\n\
          \    mlflow.set_tracking_uri(mlflow_tracking_uri)\n    mlflow_client = mlflow.MlflowClient()\n\
          \    model_name = \"fraud-detection-training\"\n    versions = mlflow_client.search_model_versions(f\"\
          name='{model_name}'\")\n    latest_version = sorted(versions, key=lambda\
          \ x: x.creation_timestamp, reverse=True)[0]\n\n    service_name = f\"fraud-detection-{latest_version.version}\"\
          \n    storage_uri = f\"s3://mlflow/0/{latest_version.run_id}/artifacts/model/\"\
          \n\n    # Create InferenceService\n    isvc = V1beta1InferenceService(\n\
          \        api_version=constants.KSERVE_V1BETA1,\n        kind=constants.KSERVE_KIND,\n\
          \        metadata=V1ObjectMeta(\n            name=service_name,\n      \
          \      namespace=namespace,\n            annotations={\n               \
          \ \"sidecar.istio.io/inject\": \"false\",\n                \"serving.kserve.io/deploymentMode\"\
          : \"Serverless\"\n            },\n        ),\n        spec=V1beta1InferenceServiceSpec(\n\
          \            predictor=V1beta1PredictorSpec(\n                model=V1beta1ModelSpec(\n\
          \                    model_format=V1beta1ModelFormat(name=\"mlflow\"),\n\
          \                    storage_uri=storage_uri,\n                    protocol_version=\"\
          v2\",\n                    resources={\n                        \"requests\"\
          : {\n                            \"cpu\": \"100m\",\n                  \
          \          \"memory\": \"1Gi\"\n                        },\n           \
          \             \"limits\": {\n                            \"cpu\": \"1\"\
          ,\n                            \"memory\": \"2Gi\"\n                   \
          \     }\n                    }\n                ),\n                service_account_name=\"\
          kserve-controller-s3\",\n            )\n        ),\n    )\n\n    # Deploy\
          \ service\n    try:\n        # Delete existing service if it exists\n  \
          \      try:\n            kserve_client.delete(name=service_name, namespace=namespace)\n\
          \            print(f\"Deleted existing service {service_name}\")\n     \
          \       time.sleep(30)\n        except RuntimeError as e:\n            if\
          \ \"NotFound\" in str(e):\n                print(f\"No existing service\
          \ {service_name} found\")\n            else:\n                raise e\n\n\
          \        # Create new service\n        response = kserve_client.create(isvc)\n\
          \        print(f\"Created new service {service_name}\")\n\n        # Wait\
          \ for the service to be ready\n        kserve_client.wait_isvc_ready(\n\
          \            name=service_name,\n            namespace=namespace,\n    \
          \        timeout_seconds=300\n        )\n\n        # Return deployment status\n\
          \        return f\"Model deployed as: {service_name}\"\n\n\n    except Exception\
          \ as e:\n        print(f\"Full error details: {str(e)}\")\n        raise\
          \ e\n\n"
        image: python:3.9
    exec-download-and-split-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_and_split_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kagglehub'\
          \ 'pandas' 'scikit-learn' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_and_split_data(output_train: OutputPath(), output_val:\
          \ OutputPath(), output_test: OutputPath()):\n    import kagglehub\n    import\
          \ pandas as pd\n    from sklearn.model_selection import train_test_split\n\
          \n    path = kagglehub.dataset_download(\"nelgiriyewithana/credit-card-fraud-detection-dataset-2023\"\
          )\n    df = pd.read_csv(f\"{path}/creditcard_2023.csv\")\n\n    train_df,\
          \ temp_df = train_test_split(df, train_size=0.6, random_state=42)\n    val_df,\
          \ test_df = train_test_split(temp_df, train_size=0.5, random_state=42)\n\
          \n    train_df.to_csv(output_train, index=False)\n    val_df.to_csv(output_val,\
          \ index=False)\n    test_df.to_csv(output_test, index=False)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'torch==1.13.1'\
          \ 'scikit-learn' 'pandas' 'mlflow==2.3.1' 'boto3' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    train_data: InputPath(),\n    val_data: InputPath(),\n\
          \    model_output: OutputPath(),\n    mlflow_tracking_uri: str,\n    minio_endpoint:\
          \ str,\n    aws_access_key_id: str,\n    aws_secret_access_key: str,\n):\n\
          \    import pandas as pd\n    import torch\n    import torch.nn as nn\n\
          \    import numpy as np\n    import torch.optim as optim\n    from torch.utils.data\
          \ import DataLoader, Dataset\n    from sklearn.preprocessing import StandardScaler\n\
          \    import mlflow\n    from mlflow.models import infer_signature\n    import\
          \ os\n\n    mlflow.pytorch.autolog()\n\n    class FraudDataset(Dataset):\n\
          \        def __init__(self, file_path):\n            data = pd.read_csv(file_path)\n\
          \            self.X = data.drop(['Class', 'id'], axis=1).values\n      \
          \      self.y = data['Class'].values\n\n            self.sample_input =\
          \ self.X[0:1].astype(np.float32)\n\n            self.X = torch.tensor(self.X,\
          \ dtype=torch.float32)\n            self.y = torch.tensor(self.y, dtype=torch.float32).unsqueeze(1)\n\
          \n        def __len__(self):\n            return len(self.y)\n\n       \
          \ def __getitem__(self, idx):\n            return self.X[idx], self.y[idx]\n\
          \n    class FraudDetectionModel(nn.Module):\n        def __init__(self):\n\
          \            super(FraudDetectionModel, self).__init__()\n            self.model\
          \ = nn.Sequential(\n                nn.Linear(29, 64),\n               \
          \ nn.ReLU(),\n                nn.Dropout(0.3),\n                nn.Linear(64,\
          \ 32),\n                nn.ReLU(),\n                nn.Dropout(0.2),\n \
          \               nn.Linear(32, 16),\n                nn.ReLU(),\n       \
          \         nn.Linear(16, 1),\n                nn.Sigmoid()\n            )\n\
          \n        def forward(self, x):\n            if not isinstance(x, torch.Tensor):\n\
          \                x = torch.tensor(x, dtype=torch.float32)\n            elif\
          \ x.dtype != torch.float32:\n                x = x.float()\n           \
          \ return self.model(x)\n\n    mlflow.set_tracking_uri(mlflow_tracking_uri)\n\
          \    os.environ['MLFLOW_S3_ENDPOINT_URL'] = minio_endpoint\n    os.environ['AWS_ACCESS_KEY_ID']\
          \ = aws_access_key_id\n    os.environ['AWS_SECRET_ACCESS_KEY'] = aws_secret_access_key\n\
          \n    with mlflow.start_run(run_name=\"fraud-detection-training\") as run:\n\
          \        train_dataset = FraudDataset(train_data)\n        val_dataset =\
          \ FraudDataset(val_data)\n        train_loader = DataLoader(train_dataset,\
          \ batch_size=32, shuffle=True)\n        val_loader = DataLoader(val_dataset,\
          \ batch_size=32)\n\n        model = FraudDetectionModel()\n        criterion\
          \ = nn.BCELoss()\n        optimizer = optim.Adam(model.parameters(), lr=0.0001)\n\
          \n        # Training\n        model.train()\n        for X_batch, y_batch\
          \ in train_loader:\n            optimizer.zero_grad()\n            outputs\
          \ = model(X_batch)\n            loss = criterion(outputs, y_batch)\n   \
          \         loss.backward()\n            optimizer.step()\n\n        # Validation\n\
          \        model.eval()\n        val_loss = 0.0\n        with torch.no_grad():\n\
          \            for X_batch, y_batch in val_loader:\n                outputs\
          \ = model(X_batch)\n                loss = criterion(outputs, y_batch)\n\
          \                val_loss += loss.item()\n            val_loss /= len(val_loader)\n\
          \            mlflow.log_metric(\"val_loss\", val_loss)\n\n        # Get\
          \ model signature\n        with torch.no_grad():\n            sample_output\
          \ = model(torch.tensor(train_dataset.sample_input, dtype=torch.float32)).numpy()\n\
          \        signature = infer_signature(train_dataset.sample_input, sample_output)\n\
          \n        # Save as TorchScript model\n        scripted_model = torch.jit.script(model)\n\
          \n        # Log model\n        mlflow.pytorch.log_model(\n            scripted_model,\n\
          \            \"model\",\n            registered_model_name=\"fraud-detection-training\"\
          \n        )\n\n"
        image: python:3.9
pipelineInfo:
  name: fraud-detection-pipeline
root:
  dag:
    tasks:
      deploy-model-kserve:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-deploy-model-kserve
        inputs:
          parameters:
            aws_access_key_id:
              runtimeValue:
                constant: minio
            aws_secret_access_key:
              runtimeValue:
                constant: toto1234
            minio_endpoint:
              runtimeValue:
                constant: http://minio.kubeflow:9000
            mlflow_tracking_uri:
              runtimeValue:
                constant: http://mlflow-server.kubeflow.svc.cluster.local:5000
        taskInfo:
          name: deploy-model-kserve
      download-and-split-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-and-split-data
        taskInfo:
          name: download-and-split-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - download-and-split-data
        inputs:
          artifacts:
            train_data:
              taskOutputArtifact:
                outputArtifactKey: output_train
                producerTask: download-and-split-data
            val_data:
              taskOutputArtifact:
                outputArtifactKey: output_val
                producerTask: download-and-split-data
          parameters:
            aws_access_key_id:
              runtimeValue:
                constant: minio
            aws_secret_access_key:
              runtimeValue:
                constant: toto1234
            minio_endpoint:
              runtimeValue:
                constant: http://minio.kubeflow:9000
            mlflow_tracking_uri:
              runtimeValue:
                constant: http://mlflow-server.kubeflow.svc.cluster.local:5000
        taskInfo:
          name: train-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
